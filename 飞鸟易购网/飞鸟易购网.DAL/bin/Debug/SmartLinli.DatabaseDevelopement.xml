<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartLinli.DatabaseDevelopement</name>
    </assembly>
    <members>
        <member name="T:SmartLinli.DatabaseDevelopement.AutofacHelper">
            <summary>
            Autofac助手；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.AutofacHelper.Container">
            <summary>
            容器；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutofacHelper.InitAutofac">
            <summary>
            初始化Autofac；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutofacHelper.Get``1">
            <summary>
            获取实例；
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutofacHelper.#cctor">
            <summary>
            构造函数；
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.AutoMapperHelper">
            <summary>
            AutoMapper助手；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.AutoMapperHelper._Mapper">
            <summary>
            映射器；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutoMapperHelper.InitMapper">
            <summary>
            初始化AutoMapper；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutoMapperHelper.Get``2(``0)">
            <summary>
            获取目标对象；
            </summary>
            <typeparam name="TSource">来源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.AutoMapperHelper.#cctor">
            <summary>
            构造函数；
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.CrytoHelper">
            <summary>
            加密助手；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.CrytoHelper.Md5(System.String)">
            <summary>
            MD5加密；
            </summary>
            <param name="plainText">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.CrytoHelper.Md5Equal(System.Byte[],System.String)">
            <summary>
            MD5值是否相等；
            </summary>
            <param name="md5">MD5值</param>
            <param name="otherPlainText">另一明文</param>
            <returns>是否相等</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ImageHelper">
            <summary>
            图像助手；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ImageHelper.GetImage(System.String)">
            <summary>
            获取图像；
            </summary>
            <param name="fileName">文件名</param>
            <returns>图像</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ImageHelper.GetImage(System.Byte[])">
            <summary>
            获取图像；
            </summary>
            <param name="imageBytes">图像所在的字节数组</param>
            <returns>图像</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ImageHelper.GetImage(System.Object)">
            <summary>
            获取图像；
            </summary>
            <param name="imageBytes">图像所在的字节数组</param>
            <returns>图像</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ImageHelper.GetBytes(System.Drawing.Image)">
            <summary>
            获取字节数组
            </summary>
            <param name="image">图像</param>
            <returns>字节数组</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.IDataReaderHelper">
            <summary>
            数据读取器助手接口；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.IDataReaderHelper.Read">
            <summary>
            数据读取器读取并前进至下一记录；
            </summary>
            <returns>是否读取得记录</returns>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.IDataReaderHelper.Item(System.Int32)">
            <summary>
            获取位于指定索引的列的值；
            </summary>
            <param name="index">索引</param>
            <returns>对象</returns>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.IDataReaderHelper.Item(System.String)">
            <summary>
            获取位于指定名称的列的值；
            </summary>
            <param name="name">名称</param>
            <returns>对象</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.IDataReaderHelper.Close">
            <summary>
            关闭；
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.DataReaderHelper">
            <summary>
            数据读取器助手；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.DataReaderHelper._DataReader">
            <summary>
            数据读取器；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataReaderHelper.Read">
            <summary>
            数据读取器读取并前进至下一记录；
            </summary>
            <returns>是否读取得记录</returns>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DataReaderHelper.Item(System.Int32)">
            <summary>
            获取位于指定索引的列的值；
            </summary>
            <param name="index">索引</param>
            <returns>值</returns>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DataReaderHelper.Item(System.String)">
            <summary>
            获取位于指定名称的列的值；
            </summary>
            <param name="name">名称</param>
            <returns>值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataReaderHelper.Close">
            <summary>
            关闭；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataReaderHelper.#ctor(System.Data.IDataReader)">
            <summary>
            构造函数；
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.DbHelperBase">
            <summary>
            数据库助手（基类）；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.DbHelperBase._DbCommand">
            <summary>
            数据库命令；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.DbCommand">
            <summary>
            数据库命令；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.DbHelperBase._DbParameter">
            <summary>
            数据库参数；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.DbParameter">
            <summary>
            数据库参数；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.DbHelperBase._DbDataAdapter">
            <summary>
            数据适配器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.DbDataAdapter">
            <summary>
            数据适配器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.DbConnectionStringName">
            <summary>
            数据库连接字符串名称；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.GetDbConnection">
            <summary>
            获取数据库连接；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.GetDbParameter">
            <summary>
            获取数据库参数；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.GetDbDataAdapter">
            <summary>
            获取数据适配器；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.NewCommand">
            <summary>
            新建命令；
            </summary>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.CommandText(System.String)">
            <summary>
            设置命令文本
            </summary>
            <param name="commandText">命令文本</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.IsStoredProcedure(System.Boolean)">
            <summary>
            设置命令是否存储过程；
            </summary>
            <param name="isStoredProcedure">是否存储过程</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.NewCommand(System.String)">
            <summary>
            新建命令；
            </summary>
            <param name="commandText">命令文本</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.NewParameter(System.String)">
            <summary>
            新建参数；
            </summary>
            <param name="parameterName">参数名称</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.SpecificParameterType(System.Object)">
            <summary>
            设置特定数据库参数类型；
            </summary>
            <param name="dbType"></param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.WithParameter(System.String,System.Object,System.ValueType,System.Int32)">
            <summary>
            包含参数；
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">值</param>
            <param name="dbType">数据类型</param>
            <param name="size">长度</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.WithParameter(System.String,System.ValueType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            包含参数；
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">长度</param>
            <param name="sourceColumn">来源列</param>
            <param name="dataRowVersion">数据行版本</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.WithParameters(System.String[])">
            <summary>
            包含参数；参数值源自数据表；
            </summary>
            <param name="parameterNames">参数名称</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ParameterType(System.Data.DbType)">
            <summary>
            设置通用数据库参数类型；
            </summary>
            <param name="dbType">通用数据库数据类型</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ParameterSize(System.Int32)">
            <summary>
            设置参数长度；
            </summary>
            <param name="size">长度</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ParameterValue(System.Object)">
            <summary>
            设置参数值；
            </summary>
            <param name="value">值</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ParameterDirection(System.Data.ParameterDirection)">
            <summary>
            设置L参数方向；
            </summary>
            <param name="parameterDirection">参数方向</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.AsInsertCommand">
            <summary>
            将新建的命令设为数据适配器的插入命令；
            </summary>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.AsUpdateCommand">
            <summary>
            将新建的命令设为数据适配器的更新命令；
            </summary>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.AsDeleteCommand">
            <summary>
            将新建的命令设为数据适配器的删除命令；
            </summary>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.Return">
            <summary>
            执行命令，返回标量；
            </summary>
            <returns>标量值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.Return``1">
            <summary>
            执行命令，返回标量；
            若结果为空值，将返回其类型的默认值；
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <returns>标量值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ReturnNullable``1">
            <summary>
            执行命令，返回可空标量；
            若结果为空值，将返回可空类型的标量值；
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <returns>标量值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.QuickReturn``1(System.String)">
            <summary>
            快速执行命令，返回标量；
            若结果为空值，将返回其类型的默认值；
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <param name="commandText">命令文本</param>
            <returns>标量值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ReturnReader">
            <summary>
            执行命令，返回数据读取器；
            完成读取后，请手动关闭数据读取器；
            </summary>
            <returns>数据读取器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.QuickReturnReader(System.String)">
            <summary>
            快速执行命令，返回数据读取器助手；
            完成读取后，请手动关闭数据读取器；
            </summary>
            <param name="commandText">命令文本</param>
            <returns>数据读取器助手</returns>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.InitialRecordIndex">
            <summary>
            初始记录序号；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.CurrentRecordIndex">
            <summary>
            当前记录序号；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.MaxRecordIndex">
            <summary>
            最大记录序号；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.HasRecord">
            <summary>
            是否读得记录；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.Records">
            <summary>
            数据读取器读得的记录；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.DbHelperBase.Item(System.String)">
            <summary>
            获取指定名称的列的值；
            </summary>
            <param name="name">名称</param>
            <returns>值</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.QuickRead(System.String)">
            <summary>
            快速执行命令，并读取一行或多行记录；
            随后判断数据库助手是否读得记录，再通过数据库助手的索引器访问该行记录的指定列；
            </summary>
            <param name="commandText">命令文本</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ReturnTable">
            <summary>
            执行SQL命令，返回数据表；
            </summary>
            <returns>数据表</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ExecuteNonQuery(System.Func{System.Exception,System.Boolean})">
            <summary>
            执行SQL命令，写入数据；
            </summary>
            <param name="match">匹配特定异常</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.Submit">
            <summary>
            执行命令，提交数据；
            </summary>
            <returns>受影响行数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.QuickSubmit(System.String)">
            <summary>
            快速执行命令，提交数据；
            </summary>
            <param name="commandText">命令文本</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.Submit(System.Data.DataTable)">
            <summary>
            执行命令，提交数据；
            </summary>
            <param name="dataTable">数据表</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DbHelperBase.ConvertNullable``1(System.Object)">
            <summary>
            转换可空值；
            </summary>
            <typeparam name="T">结果类型</typeparam>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.DalBase">
            <summary>
            基于EntityFramwork的数据访问层基类；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DalBase.#ctor">
            <summary>
            构造函数；
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.SmartDbContext">
            <summary>
            自定义数据库上下文；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SmartDbContext.SaveChanges(System.String)">
            <summary>
            保存更改；
            </summary>
            <param name="message">消息</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SmartDbContext.#ctor(System.String)">
            <summary>
            构造函数；
            </summary>
            <param name="nameOrConnectionString">数据库名称或连接字符串名称</param>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.PgsqlContext">
            <summary>
            数据库上下文（基于PostgreSQL）；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlContext.#ctor(System.String)">
            <summary>
            构造函数；
            </summary>
            <param name="nameOrConnectionString">名称或连接字符串</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            创建模型时；
            </summary>
            <param name="modelBuilder">模型建造器</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlContext.SaveChanges(System.String)">
            <summary>
            保存更改；
            </summary>
            <param name="notUniqueErrorMessage">不唯一错误消息</param>
            <returns>受影响行数</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.SqlContext">
            <summary>
            数据库上下文（基于SQL Server）；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlContext.#ctor">
            <summary>
            构造函数；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlContext.#ctor(System.String)">
            <summary>
            构造函数；
            </summary>
            <param name="nameOrConnectionString">名称或连接字符串</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            创建模型时；
            </summary>
            <param name="modelBuilder">模型建造器</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlContext.SaveChanges(System.String)">
            <summary>
            保存更改；
            </summary>
            <param name="notUniqueErrorMessage">不唯一错误消息</param>
            <returns>受影响行数</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.EfHelper">
            <summary>
            EntityFramwork助手；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.EfHelper._HasWarmedUp">
            <summary>
            是否已预热；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.GetDbContext">
            <summary>
            获取数据库上下文；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.WarmUp">
            <summary>
            预热；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.SelectCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询计数；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="match">匹配条件</param>
            <returns>计数</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.SelectOne``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询单个实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="match">匹配条件</param>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.SelectOne``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            查询单个实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="match">匹配条件</param>
            <param name="objectPath">对象路径</param>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="match">匹配条件</param>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.SelectOne``1(System.String,System.Object[])">
            <summary>
            查询单个实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.Select``1(System.String,System.Object[])">
            <summary>
            查询实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="commandText">命令文本</param>
            <param name="parameters">参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.SelectAll``1">
            <summary>
            查询所有实体；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.EfHelper.Save``1(``0,System.Data.Entity.EntityState,System.String)">
            <summary>
            保存；
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体</param>
            <param name="entityState">实体状态</param>
            <param name="message">消息</param>
            <returns>受影响行数</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.NotUniqueException">
            <summary>
            违反唯一性异常；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.NotUniqueException.#ctor">
            <summary>
            构造函数；
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.PgsqlHelper">
            <summary>
            PostgreSQL助手；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.PgsqlHelper.DbConnectionStringName">
            <summary>
            数据库连接字符串名称；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlHelper.GetDbConnection">
            <summary>
            获取数据库连接；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlHelper.GetDbParameter">
            <summary>
            获取数据库参数；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlHelper.GetDbDataAdapter">
            <summary>
            获取数据适配器；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlHelper.SpecificParameterType(System.Object)">
            <summary>
            设置参数的PostgreSQL助手数据类型；
            </summary>
            <param name="dbType">SQL Server数据类型</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.PgsqlHelper.Submit">
            <summary>
            执行命令，提交数据；
            </summary>
            <returns>受影响行数</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.SqlHelper">
            <summary>
            SQL Server助手；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.SqlHelper.DbConnectionStringName">
            <summary>
            数据库连接字符串名称；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlHelper.GetDbConnection">
            <summary>
            获取数据库连接；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlHelper.GetDbParameter">
            <summary>
            获取数据库参数；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlHelper.GetDbDataAdapter">
            <summary>
            获取数据适配器；
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlHelper.SpecificParameterType(System.Object)">
            <summary>
            设置参数的SQL Server数据类型；
            </summary>
            <param name="dbType">SQL Server数据类型</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.SqlHelper.Submit">
            <summary>
            执行命令，提交数据；
            </summary>
            <returns>受影响行数</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1">
            <summary>
            验证单元；
            </summary>
            <typeparam name="TSpec">验证规则类型</typeparam>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.Specifications">
            <summary>
            验证规则；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.Control">
            <summary>
            需要验证的控件；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.ErrorProvider">
            <summary>
            错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.ControlText">
            <summary>
            控件文本；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.Match">
            <summary>
            匹配操作；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.ErrorMessage">
            <summary>
            错误消息；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.Item(System.String)">
            <summary>
            索引器；
            </summary>
            <param name="name">验证规则名称</param>
            <returns>验证规则</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.AddSpecification(System.String,`0)">
            <summary>
            添加验证规则；
            </summary>
            <param name="name">验证规则名称</param>
            <param name="item">验证规则项目</param>
            <returns>验证单元</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.Validate(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            验证；
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidatingUnit`1.#ctor(System.Windows.Forms.Control)">
            <summary>
            构造函数；
            </summary>
            <param name="control">需要验证的控件</param>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.BaseValidator`1">
            <summary>
            验证器基类；
            </summary>
            <typeparam name="TSpec">验证规则类型</typeparam>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.BaseValidator`1.ValidatingUnits">
            <summary>
            验证单元；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.GetDefaultErrorProvider">
            <summary>
            获取默认错误提供器；
            （组件所在窗体应包含错误提供器，并作为第1个组件）
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.Add(System.Windows.Forms.Control[])">
            <summary>
            添加（需要验证的控件）；
            </summary>
            <param name="controls">控件</param>
            <returns>验证器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.With(System.Windows.Forms.ErrorProvider)">
            <summary>
            包含（错误提供器）；
            </summary>
            <param name="errorProvider">错误提供器</param>
            <returns>验证器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.Configure(System.Func{SmartLinli.DatabaseDevelopement.BaseValidatingUnit{`0},System.Boolean},System.String,System.ValueTuple{System.String,`0}[])">
            <summary>
            （为所有验证单元）配置；
            </summary>
            <param name="match">匹配操作</param>
            <param name="errorMessage">错误消息</param>
            <param name="specifications">验证规则</param>
            <returns>验证器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.Add(System.Windows.Forms.Control,System.Func{SmartLinli.DatabaseDevelopement.BaseValidatingUnit{`0},System.Boolean},System.String,System.ValueTuple{System.String,`0}[])">
            <summary>
            添加
            </summary>
            <param name="control">需要验证的控件</param>
            <param name="match">匹配操作</param>
            <param name="errorMessage">错误消息</param>
            <param name="specifications">验证规则</param>
            <returns>验证器</returns>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.BaseValidator`1.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.BaseValidator`1.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ConfirmValidator">
            <summary>
            确认验证器；
            使用前，先调用Add方法，添加需要验证内容是否一致的2个控件；
            再调用With方法，添加错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ConfirmValidator.Match">
            <summary>
            匹配操作；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ConfirmValidator.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ConfirmValidator.ConfigSpecification(SmartLinli.DatabaseDevelopement.BaseValidatingUnit{System.Windows.Forms.Control},System.Windows.Forms.Control)">
            <summary>
            配置验证规则；
            </summary>
            <param name="validatingUnit">验证单元</param>
            <param name="referenceControl">参照控件</param>
            <returns>验证单元</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ConfirmValidator.Add(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            添加（参照控件与确认控件）；
            </summary>
            <param name="referenceControl">参照控件</param>
            <param name="confirmControl">确认控件</param>
            <returns>确认验证器</returns>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.ConfirmValidator.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ConfirmValidator.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ConfirmValidator.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ExistValidator">
            <summary>
            存在验证器；
            使用前，先调用Add方法，添加需要验证的控件、匹配操作、并指定存在是否为有效；
            亦可先调用Add方法，批量添加需要验证的控件，再调用Configure方法，统一配置匹配操作、并指定存在是否为有效；
            最后调用With方法，添加错误提供器；
            </summary>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.ExistValidator.ExistIsValid">
            <summary>
            存在为有效；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ExistValidator.ErrorMessage">
            <summary>
            错误消息；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidator.ConfigSpecification(SmartLinli.DatabaseDevelopement.BaseValidatingUnit{System.Func{System.String,System.Boolean}},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            配置验证规则；
            </summary>
            <param name="validatingUnit">验证单元</param>
            <param name="match">匹配操作</param>
            <param name="existIsValid">存在是否为有效</param>
            <returns></returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidator.Add(System.Windows.Forms.Control,System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            添加（需要验证的控件）；
            同时指定匹配操作、存在是否为有效；
            </summary>
            <param name="control">控件</param>
            <param name="match">匹配操作</param>
            <param name="existIsValid">存在是否为有效</param>
            <returns>存在验证器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidator.Configure(System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            配置；
            </summary>
            <param name="match">匹配操作</param>
            <param name="existIsValid">存在是否为有效</param>
            <returns>存在验证器</returns>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.ExistValidator.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidator.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidator.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ConfirmValidatingExtension">
            <summary>
            确认验证扩展；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ConfirmValidatingExtension.Confirm(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            确认是否与另一控件的内容一致；
            </summary>
            <param name="confirmControl">需要验证的控件</param>
            <param name="referenceControl">需要参照的控件</param>
            <returns>控件</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.DescriptionExtension">
            <summary>
            描述扩展；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DescriptionExtension.Descrption(System.Windows.Forms.Control,System.String)">
            <summary>
            控件相应信息的描述；
            </summary>
            <param name="control">需要验证的控件</param>
            <param name="description">描述</param>
            <returns>控件</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ExistValidatingExtension">
            <summary>
            存在验证扩展；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ExistValidatingExtension.CheckExist(System.Windows.Forms.Control,System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            检查是否存在；
            控件所在窗体应有错误提供器，并通过名为ErrorProvider的公有属性访问；
            </summary>
            <param name="control">需要验证的控件</param>
            <param name="match">匹配条件</param>
            <param name="existIsValid">存在是否为有效</param>
            <returns>控件</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.LengthValidatingExtension">
            <summary>
            文本长度验证扩展；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidatingExtension.Length(System.Windows.Forms.Control,System.Int32[])">
            <summary>
            文本长度；允许指定多个文本长度；
            控件所在窗体应有错误提供器，并通过名为ErrorProvider的公有属性访问；
            </summary>
            <param name="control">需要验证的控件</param>
            <param name="lengths">有效的文本长度</param>
            <returns>控件</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidatingExtension.LengthRange(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            文本长度范围；
            控件所在窗体应有错误提供器，并通过名为ErrorProvider的公有属性访问；
            </summary>
            <param name="control">需要验证的控件</param>
            <param name="minLength">有效的最小文本长度</param>
            <param name="maxLength">有效的最大文本长度</param>
            <returns>控件</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.RequiredInfoValidatingExtension">
            <summary>
            必填信息验证扩展；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.RequiredInfoValidatingExtension.NotNull(System.Windows.Forms.Control)">
            <summary>
            非空；
            控件所在窗体应有错误提供器，并通过名为ErrorProvider的公有属性访问；
            </summary>
            <param name="control">需要验证的控件</param>
            <returns>控件</returns>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.LengthValidator">
            <summary>
            长度验证器；
            使用前，先调用Add方法，添加需要验证的控件、最小长度、最大长度；
            亦可先调用Add方法，批量添加需要验证的控件，再调用Configure方法，统一配置最小长度、最大长度；
            最后调用With方法，添加错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.LengthValidator.Match">
            <summary>
            匹配操作；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidator.ConfigSpecification(SmartLinli.DatabaseDevelopement.BaseValidatingUnit{System.Int32},System.Int32,System.Int32)">
            <summary>
            配置验证规则；
            </summary>
            <param name="validatingUnit">验证单元</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <returns>验证单元</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidator.Add(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            添加（需要验证的控件）；
            同时指定最小长度、最大长度;
            </summary>
            <param name="control">控件</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <returns>长度验证器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidator.Configure(System.Int32,System.Int32)">
            <summary>
            配置；
            </summary>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <returns>验证器</returns>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.LengthValidator.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidator.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.LengthValidator.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.RequiredInfoValidator">
            <summary>
            必填信息验证器；
            使用前，先调用Add方法，批量添加需要验证的控件；
            再调用With方法，添加错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.Match">
            <summary>
            匹配操作；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.ErrorMessage">
            <summary>
            错误消息；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.Add(System.Windows.Forms.Control[])">
            <summary>
            添加（需要验证的控件）；
            </summary>
            <param name="controls">控件</param>
            <returns>验证器</returns>
        </member>
        <member name="F:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.RequiredInfoValidator.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.ValidatingUnit">
            <summary>
            验证单元；
            针对单个控件，执行具体验证过程；
            控件所在窗体应有错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ValidatingUnit.Control">
            <summary>
            需要验证的控件；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ValidatingUnit.ErrorProvider">
            <summary>
            错误提供器；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ValidatingUnit.ControlText">
            <summary>
            控件文本；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ValidatingUnit.Match">
            <summary>
            匹配操作；
            </summary>
        </member>
        <member name="P:SmartLinli.DatabaseDevelopement.ValidatingUnit.ErrorMessage">
            <summary>
            错误消息；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ValidatingUnit.GetErrorProvider(System.Windows.Forms.Control)">
            <summary>
            获取错误提供器；
            控件所在窗体应有错误提供器，并通过名为ErrorProvider的公有属性访问；
            </summary>
            <param name="control">需要验证的控件</param>
            <returns>错误提供器</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ValidatingUnit.Validate(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            验证；
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.ValidatingUnit.#ctor(System.Windows.Forms.Control)">
            <summary>
            构造函数；
            </summary>
            <param name="control">需要验证的控件</param>
        </member>
        <member name="T:SmartLinli.DatabaseDevelopement.DataBindHelper">
            <summary>
            数据绑定助手；
            </summary>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.QuickFill(SmartLinli.DatabaseDevelopement.DbHelperBase,System.String,System.Windows.Forms.ComboBox,System.String)">
            <summary>
            快速填充；
            利用数据读取器，读取记录并添加至组合框控件的项集合；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="commandText">命令文本</param>
            <param name="comboBox">组合框控件</param>
            <param name="displayMember">显示值</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.QuickFill(SmartLinli.DatabaseDevelopement.DbHelperBase,System.String,System.Windows.Forms.ListControl,System.String,System.String)">
            <summary>
            快速填充；
            读取数据表，并设为列表控件的数据源；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="commandText">命令文本</param>
            <param name="listControl">列表控件</param>
            <param name="displayMember">显示值</param>
            <param name="valueMember">实际值</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.QuickFill(SmartLinli.DatabaseDevelopement.DbHelperBase,System.String,System.Windows.Forms.DataGridView)">
            <summary>
            快速填充；
            读取数据表，并设为数据网格视图的数据源；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="commandText">命令文本</param>
            <param name="dataGridView">数据网格视图</param>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.GetDataColumnName(System.Windows.Forms.Control)">
            <summary>
            获取数据属性的名称；
            </summary>
            <param name="control">控件</param>
            <returns>数据属性名称</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.DisplayOn(SmartLinli.DatabaseDevelopement.DbHelperBase,System.Windows.Forms.Control,System.String)">
            <summary>
            显示于控件；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="control">控件</param>
            <param name="name">数据属性名称</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.DisplayOn(SmartLinli.DatabaseDevelopement.DbHelperBase,System.Windows.Forms.RadioButton,System.String,System.Boolean)">
            <summary>
            显示于单选按钮；
            单选按钮标签可能需要设为相应的属性名称；若单选按钮的选中状态与数据相反，还可在属性名称前加!；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="radioButton">单选按钮</param>
            <param name="name">数据属性名称</param>
            <param name="isOpposite">单选按钮的选中状态是否与数据相反</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.DisplayOn(SmartLinli.DatabaseDevelopement.DbHelperBase,System.Windows.Forms.DateTimePicker,System.String)">
            <summary>
            显示于日期时间选择器；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="dateTimePicker">日期时间选择器</param>
            <param name="name">数据属性名称</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.DisplayOn(SmartLinli.DatabaseDevelopement.DbHelperBase,System.Windows.Forms.ListControl,System.String)">
            <summary>
            显示于列表控件；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="listControl">列表控件</param>
            <param name="name">数据属性名称</param>
            <returns>数据库助手</returns>
        </member>
        <member name="M:SmartLinli.DatabaseDevelopement.DataBindHelper.DisplayOn(SmartLinli.DatabaseDevelopement.DbHelperBase,System.Windows.Forms.Control[])">
            <summary>
            显示于控件；
            控件应满足以下要求之一：①控件名称包含相应的属性名称作为后缀，并以下划线分隔，例如txb_Name；②控件标签设为相应的属性名称，或根据具体控件要求添加额外信息；
            </summary>
            <param name="dbHelper">数据库助手</param>
            <param name="controls">控件</param>
            <returns>数据库助手</returns>
        </member>
    </members>
</doc>
